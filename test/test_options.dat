# alignta's test suite

#-----------------------------------------------------------------------------
# Alias

#---------------------------------------
# Align_should_be_alias_of_Alignta_data_begin
  a = 1
  bbb = 10
  ccccc = 100
# Align_should_be_alias_of_Alignta_data_end
# Align_should_be_alias_of_Alignta_expected_begin
  a     = 1
  bbb   = 10
  ccccc = 100
# Align_should_be_alias_of_Alignta_expected_end

#-----------------------------------------------------------------------------
# Filtering

#---------------------------------------
# should_align_only_matching_g_pattern_data_begin
  # a = 1
  # bbb = 10
  # ccccc = 100
  a = 1
  bbb = 10
  ccccc = 100
# should_align_only_matching_g_pattern_data_end
# should_align_only_matching_g_pattern_expected_begin
  # a     = 1
  # bbb   = 10
  # ccccc = 100
  a = 1
  bbb = 10
  ccccc = 100
# should_align_only_matching_g_pattern_expected_end

#---------------------------------------
# should_align_except_matching_v_pattern_data_begin
  # a = 1
  # bbb = 10
  # ccccc = 100
    a = 1
    bbb = 10
    ccccc = 100
# should_align_except_matching_v_pattern_data_end
# should_align_except_matching_v_pattern_expected_begin
  # a = 1
  # bbb = 10
  # ccccc = 100
    a     = 1
    bbb   = 10
    ccccc = 100
# should_align_except_matching_v_pattern_expected_end

#---------------------------------------
# should_align_block_only_matching_g_pattern_data_begin
  #*|  a = 1        ***
  #**  bbb = 10     ***
  #**  ccccc = 100  ***
  ***  a = 1        ***
  ***  bbb = 10     ***
  ***  ccccc = 100  |**
# should_align_block_only_matching_g_pattern_data_end
# should_align_block_only_matching_g_pattern_expected_begin
  #*|  a     = 1    ***
  #**  bbb   = 10   ***
  #**  ccccc = 100  ***
  ***  a = 1        ***
  ***  bbb = 10     ***
  ***  ccccc = 100  |**
# should_align_block_only_matching_g_pattern_expected_end

#---------------------------------------
# should_align_block_except_matching_v_pattern_data_begin
  #*|  a = 1        ***
  #**  bbb = 10     ***
  #**  ccccc = 100  ***
  ***  a = 1        ***
  ***  bbb = 10     ***
  ***  ccccc = 100  |**
# should_align_block_except_matching_v_pattern_data_end
# should_align_block_except_matching_v_pattern_expected_begin
  #*|  a = 1        ***
  #**  bbb = 10     ***
  #**  ccccc = 100  ***
  ***  a     = 1    ***
  ***  bbb   = 10   ***
  ***  ccccc = 100  |**
# should_align_block_except_matching_v_pattern_expected_end

#-----------------------------------------------------------------------------
# &ignorecase

#---------------------------------------
# should_not_ignore_case_data_begin
  a b
  A B
  aa bb
  AA BB
  aaa bbb
  AAA BBB
# should_not_ignore_case_data_end
# should_not_ignore_case_expected_begin
  a   b
  A B
  aa  bb
  AA BB
  aaa bbb
  AAA BBB
# should_not_ignore_case_expected_end

#---------------------------------------
# should_ignore_case_when_c_data_begin
  a b
  A B
  aa bb
  AA BB
  aaa bbb
  AAA BBB
# should_ignore_case_when_c_data_end
# should_ignore_case_when_c_expected_begin
  a   b
  A   B
  aa  bb
  AA  BB
  aaa bbb
  AAA BBB
# should_ignore_case_when_c_expected_end

#-----------------------------------------------------------------------------
# Options

#---------------------------------------
# buffer_local_options_should_take_precedence_data_begin
  a = 1
  bbb = 10
  ccccc = 100
# buffer_local_options_should_take_precedence_data_end
# buffer_local_options_should_take_precedence_expected_begin
      a =   1
    bbb =  10
  ccccc = 100
# buffer_local_options_should_take_precedence_expected_end

#---------------------------------------
# should_align_with_default_arguments_if_no_args_given_data_begin
  a = 1
  bbb = 10
  ccccc = 100
# should_align_with_default_arguments_if_no_args_given_data_end
# should_align_with_default_arguments_if_no_args_given_expected_begin
      a =   1
    bbb =  10
  ccccc = 100
# should_align_with_default_arguments_if_no_args_given_expected_end

#-----------------------------------------------------------------------------
# Parser

#---------------------------------------
# should_be_parsed_as_regexp_data_begin
  a \d\+ 1 aaaaa
  bbb \d\+ 10 bbb
  ccccc \d\+ 100 c
# should_be_parsed_as_regexp_data_end
# should_be_parsed_as_regexp_expected_begin
  a \d\+     1   aaaaa
  bbb \d\+   10  bbb
  ccccc \d\+ 100 c
# should_be_parsed_as_regexp_expected_end

#---------------------------------------
# should_be_parsed_as_regexp_2_data_begin
  a \d\+ 1 \u\+ AAAAA a
  bbb \d\+ 10 \u\+ BBB b
  ccccc \d\+ 100 \u\+ C c
# should_be_parsed_as_regexp_2_data_end
# should_be_parsed_as_regexp_2_expected_begin
  a \d\+     1   \u\+ AAAAA a
  bbb \d\+   10  \u\+ BBB   b
  ccccc \d\+ 100 \u\+ C     c
# should_be_parsed_as_regexp_2_expected_end

#---------------------------------------
# should_be_parsed_as_string_data_begin
  a \d\+ 1 aaaaa
  bbb \d\+ 10 bbb
  ccccc \d\+ 100 c
# should_be_parsed_as_string_data_end
# should_be_parsed_as_string_expected_begin
  a     \d\+ 1 aaaaa
  bbb   \d\+ 10 bbb
  ccccc \d\+ 100 c
# should_be_parsed_as_string_expected_end

#---------------------------------------
# should_be_parsed_as_string_2_data_begin
  a \d\+ 1 \u\+ AAAAA a
  bbb \d\+ 10 \u\+ BBB b
  ccccc \d\+ 100 \u\+ C c
# should_be_parsed_as_string_2_data_end
# should_be_parsed_as_string_2_expected_begin
  a     \d\+ 1   \u\+ AAAAA a
  bbb   \d\+ 10  \u\+ BBB b
  ccccc \d\+ 100 \u\+ C c
# should_be_parsed_as_string_2_expected_end

#---------------------------------------
# asterisk_should_be_parsed_as_string_data_begin
  a //* ////// AAA
  bbb //* //// BB
  ccccc //* // C
# asterisk_should_be_parsed_as_string_data_end
# asterisk_should_be_parsed_as_string_expected_begin
  a     //* ////// AAA
  bbb   //* //// BB
  ccccc //* // C
# asterisk_should_be_parsed_as_string_expected_end

#---------------------------------------
# asterisk_should_be_parsed_as_string_2_data_begin
  a //* ////// AAA @@* @ aaaaa
  bbb //* //// BB @@* @@@ bbb
  ccccc //* // C @@* @@@@@ c
# asterisk_should_be_parsed_as_string_2_data_end
# asterisk_should_be_parsed_as_string_2_expected_begin
  a     //* ////// AAA @@* @ aaaaa
  bbb   //* //// BB    @@* @@@ bbb
  ccccc //* // C       @@* @@@@@ c
# asterisk_should_be_parsed_as_string_2_expected_end

#---------------------------------------
# asterisk_should_be_parsed_as_regexp_data_begin
  a //* ////// AAA
  bbb //* //// BB
  ccccc //* // C
# asterisk_should_be_parsed_as_regexp_data_end
# asterisk_should_be_parsed_as_regexp_expected_begin
  a     // * ////// AAA
  bbb   // * ////   BB
  ccccc // * //     C
# asterisk_should_be_parsed_as_regexp_expected_end

#---------------------------------------
# asterisk_should_be_parsed_as_regexp_2_data_begin
  a //* ////// AAA @@* @ aaaaa
  bbb //* //// BB @@* @@@ bbb
  ccccc //* // C @@* @@@@@ c
# asterisk_should_be_parsed_as_regexp_2_data_end
# asterisk_should_be_parsed_as_regexp_2_expected_begin
  a     // * ////// AAA @@ * @     aaaaa
  bbb   // * ////   BB  @@ * @@@   bbb
  ccccc // * //     C   @@ * @@@@@ c
# asterisk_should_be_parsed_as_regexp_2_expected_end

#---------------------------------------
# should_be_parsed_as_pattern_data_begin
  a << 1
  bbb << 10
  ccccc << 100
# should_be_parsed_as_pattern_data_end
# should_be_parsed_as_pattern_expected_begin
  a     << 1
  bbb   << 10
  ccccc << 100
# should_be_parsed_as_pattern_expected_end

#---------------------------------------
# should_be_parsed_as_pattern_p_data_begin
  a -p 1
  bbb -p 10
  ccccc -p 100
# should_be_parsed_as_pattern_p_data_end
# should_be_parsed_as_pattern_p_expected_begin
  a     -p 1
  bbb   -p 10
  ccccc -p 100
# should_be_parsed_as_pattern_p_expected_end

#-----------------------------------------------------------------------------
# unite-alignta

#---------------------------------------
# extending_options_should_take_precedence_data_begin
  a = 1
  bbb = 10
  ccccc = 100
# extending_options_should_take_precedence_data_end
# extending_options_should_take_precedence_expected_begin
      a =   1
    bbb =  10
  ccccc = 100
# extending_options_should_take_precedence_expected_end

# vim:sw=4:ts=4:ft=conf:et:ai:list
